syntax = "proto3";
package covid.parser;

option java_package = "edu.uw.bhi.bionlp.covid.parser";

// python3 -m grpc_tools.protoc -I ./ --python_out=. --grpc_python_out=. CovidParser.proto

/**
 * COVID
 */ 
service Covid {
    rpc Predict (PredictionInput) returns (PredictionOutput);
}

message PredictionInput {
    string id = 1;
    string text = 2;
    int32 device = 3;
}

message PredictionOutput {
    string id = 1;
    repeated PredictionEvent predictions = 2;
}

message PredictionEvent {
    string entity_type = 1;
    string status_type = 2;
    string trig_type = 3;
    string type = 4;
    repeated PredictionEventArgument arguments = 5;
}

message PredictionEventArgument {
    repeated int32 char_idxs = 1;
    string label = 2;
    int32 sent_idx = 3;
    string text = 4;
    repeated int32 tok_idxs = 5;
    repeated string tokens = 6;
    string type = 7;
}

/**
 * Social Determinants of Health
 */ 
service SDoH {
    rpc Predict (PredictionInput) returns (PredictionOutput);
}

/**
 * OpenNLP
 */
service OpenNLP {
    rpc DetectSentences (SentenceDetectionInput) returns (SentenceDetectionOutput);
}

message SentenceDetectionInput {
    string id = 1;
    string text = 2;
}

message SentenceDetectionOutput {
    string id = 1;
    string text = 2;
    repeated Sentence sentences = 3;
    repeated string errors = 4;
}

/**
 * MetaMap
 */
service MetaMap {
    rpc ExtractNamedEntities (MetaMapInput) returns (MetaMapOutput);
}

message MetaMapInput {
    string id = 1;
    repeated Sentence sentences = 2;
    repeated string semantic_types = 3;
}

message MetaMapConcept {
    string cui = 1;
    string concept_name = 2;
    string source_phrase = 3;
    repeated string semantic_types = 4;
    int32 begin_sent_char_index = 5;
    int32 end_sent_char_index = 6;
    int32 begin_doc_char_index = 7;
    int32 end_doc_char_index = 8;
    string prediction = 9;
}

message MetaMapSentence {
    int32 id = 1;
    int32 begin_char_index = 2;
    int32 end_char_index = 3;
    string text = 4;
    repeated MetaMapConcept concepts = 5;
}

message MetaMapOutput {
    string id = 1;
    repeated MetaMapSentence sentences = 2;
    repeated string errors = 3;
}

/**
 * AssertionClassifier
 */
service AssertionClassifier {
    rpc PredictAssertion (AssertionClassifierInput) returns (AssertionClassifierOutput) {}
} 

message Sentence {
    int32 id = 1;
    int32 begin_char_index = 2;
    int32 end_char_index = 3;
    string text = 4;
}

message AssertionClassifierInput {
    string text = 1;
    int32 start_char_index = 2;
    int32 end_char_index = 3;
}

message AssertionClassifierOutput {
    string prediction = 1;
    string error = 2;
}