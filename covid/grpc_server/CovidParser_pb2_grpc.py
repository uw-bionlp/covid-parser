# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_server.CovidParser_pb2 as CovidParser__pb2


class CovidStub(object):
    """python3 -m grpc_tools.protoc -I ./ --python_out=. --grpc_python_out=. CovidParser.proto

    *
    COVID
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/covid.parser.Covid/Predict',
                request_serializer=CovidParser__pb2.CovidInput.SerializeToString,
                response_deserializer=CovidParser__pb2.CovidOutput.FromString,
                )


class CovidServicer(object):
    """python3 -m grpc_tools.protoc -I ./ --python_out=. --grpc_python_out=. CovidParser.proto

    *
    COVID
    """

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CovidServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=CovidParser__pb2.CovidInput.FromString,
                    response_serializer=CovidParser__pb2.CovidOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'covid.parser.Covid', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Covid(object):
    """python3 -m grpc_tools.protoc -I ./ --python_out=. --grpc_python_out=. CovidParser.proto

    *
    COVID
    """

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/covid.parser.Covid/Predict',
            CovidParser__pb2.CovidInput.SerializeToString,
            CovidParser__pb2.CovidOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class OpenNLPStub(object):
    """*
    OpenNLP
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectSentences = channel.unary_unary(
                '/covid.parser.OpenNLP/DetectSentences',
                request_serializer=CovidParser__pb2.SentenceDetectionInput.SerializeToString,
                response_deserializer=CovidParser__pb2.SentenceDetectionOutput.FromString,
                )


class OpenNLPServicer(object):
    """*
    OpenNLP
    """

    def DetectSentences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpenNLPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectSentences': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectSentences,
                    request_deserializer=CovidParser__pb2.SentenceDetectionInput.FromString,
                    response_serializer=CovidParser__pb2.SentenceDetectionOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'covid.parser.OpenNLP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OpenNLP(object):
    """*
    OpenNLP
    """

    @staticmethod
    def DetectSentences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/covid.parser.OpenNLP/DetectSentences',
            CovidParser__pb2.SentenceDetectionInput.SerializeToString,
            CovidParser__pb2.SentenceDetectionOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class MetaMapStub(object):
    """*
    MetaMap
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExtractNamedEntities = channel.unary_unary(
                '/covid.parser.MetaMap/ExtractNamedEntities',
                request_serializer=CovidParser__pb2.MetaMapInput.SerializeToString,
                response_deserializer=CovidParser__pb2.MetaMapOutput.FromString,
                )


class MetaMapServicer(object):
    """*
    MetaMap
    """

    def ExtractNamedEntities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetaMapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExtractNamedEntities': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractNamedEntities,
                    request_deserializer=CovidParser__pb2.MetaMapInput.FromString,
                    response_serializer=CovidParser__pb2.MetaMapOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'covid.parser.MetaMap', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetaMap(object):
    """*
    MetaMap
    """

    @staticmethod
    def ExtractNamedEntities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/covid.parser.MetaMap/ExtractNamedEntities',
            CovidParser__pb2.MetaMapInput.SerializeToString,
            CovidParser__pb2.MetaMapOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class AssertionClassifierStub(object):
    """*
    AssertionClassifier
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PredictAssertion = channel.unary_unary(
                '/covid.parser.AssertionClassifier/PredictAssertion',
                request_serializer=CovidParser__pb2.AssertionClassifierInput.SerializeToString,
                response_deserializer=CovidParser__pb2.AssertionClassifierOutput.FromString,
                )


class AssertionClassifierServicer(object):
    """*
    AssertionClassifier
    """

    def PredictAssertion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssertionClassifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PredictAssertion': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictAssertion,
                    request_deserializer=CovidParser__pb2.AssertionClassifierInput.FromString,
                    response_serializer=CovidParser__pb2.AssertionClassifierOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'covid.parser.AssertionClassifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AssertionClassifier(object):
    """*
    AssertionClassifier
    """

    @staticmethod
    def PredictAssertion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/covid.parser.AssertionClassifier/PredictAssertion',
            CovidParser__pb2.AssertionClassifierInput.SerializeToString,
            CovidParser__pb2.AssertionClassifierOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
